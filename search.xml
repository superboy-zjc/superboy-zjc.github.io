<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>61-旋转链表</title>
      <link href="/2020/07/31/61%E3%80%81%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/07/31/61%E3%80%81%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="61、旋转链表"><a href="#61、旋转链表" class="headerlink" title="61、旋转链表"></a>61、旋转链表</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p><a href="https://imgchr.com/i/a1V4KO"><img src="https://s1.ax1x.com/2020/07/31/a1V4KO.png" alt="a1V4KO.png"></a></p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>此题比较简单，思路也比较明确。本来我的思路是直接遍历到 n - k%n -1 的位置将next复制一份后指向None，然后用复制的继续遍历到屁股指向head。</p><p>但看了题解发现，先遍历一般把屁股指向头形成环形 并顺便把链表长度计算一下，然后再到 n - k%n -1 的位置把next当新的头并将next指向None，也可以。</p><p>最终选择官方题解的方法，其实没什么区别，先连头后连头罢了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span>(<span class="params">self, head: ListNode, k: int</span>) -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> head == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line">        old_tail = head</span><br><span class="line">        <span class="keyword">while</span> old_tail.next:</span><br><span class="line">            old_tail = old_tail.next</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        old_tail.next = head</span><br><span class="line">        new_tail = head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - k % n - <span class="number">1</span>):</span><br><span class="line">            new_tail = new_tail.next</span><br><span class="line">        new_head=new_tail.next</span><br><span class="line">        new_tail.next = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> new_head</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1、部署实验WAMP环境——PHPStudy</title>
      <link href="/2020/07/27/1%E3%80%81%E9%83%A8%E7%BD%B2%E5%AE%9E%E9%AA%8CWAMP%E7%8E%AF%E5%A2%83%E2%80%94%E2%80%94PHPStudy/"/>
      <url>/2020/07/27/1%E3%80%81%E9%83%A8%E7%BD%B2%E5%AE%9E%E9%AA%8CWAMP%E7%8E%AF%E5%A2%83%E2%80%94%E2%80%94PHPStudy/</url>
      
        <content type="html"><![CDATA[<h2 id="部署实验WAMP环境——PHPStudy"><a href="#部署实验WAMP环境——PHPStudy" class="headerlink" title="部署实验WAMP环境——PHPStudy"></a>部署实验WAMP环境——PHPStudy</h2><h3 id="一、Windows2008部署经典Web服务器架构WAMP"><a href="#一、Windows2008部署经典Web服务器架构WAMP" class="headerlink" title="一、Windows2008部署经典Web服务器架构WAMP"></a>一、Windows2008部署经典Web服务器架构WAMP</h3><blockquote><p>使用环境部署框架软件：<strong>PHPStudy</strong>2016版本 （集成环境</p></blockquote><p>1、安装PhpStudy，安装后发现Apache服务无法开启，原因是缺少VC9运行库，安装X86的VC9运行库后成功开启Apache、PHP服务。访问<code>127.0.0.1</code>本地web服务，发现PHPStudy探针，说明环境搭建完成。</p><p>2、使用PHPStudy探针网页下方自带的mysql客户端尝试连接本地Mysql服务，用户名密码都是root。</p><h3 id="二、Apache服务器目录分析"><a href="#二、Apache服务器目录分析" class="headerlink" title="二、Apache服务器目录分析"></a>二、Apache服务器目录分析</h3><h4 id="1、Web根目录分析"><a href="#1、Web根目录分析" class="headerlink" title="1、Web根目录分析"></a>1、Web根目录分析</h4><blockquote><p>phpStudy\WWW</p></blockquote><p>1）探针网页：l.php</p><p>2）PHPinfo页面：phpinfo.php</p><p>3）phpmyadmin页面：基于php的MysqlWeb客户端</p><h4 id="2、Apache配置文件分析"><a href="#2、Apache配置文件分析" class="headerlink" title="2、Apache配置文件分析"></a>2、Apache配置文件分析</h4><blockquote><p>phpStudy/Apache/httpd.conf</p></blockquote><p>分析Apache配置文件httpd.conf，<code>Document root</code>是网站主页的文件夹路径</p><h3 id="3、Apache日志文件"><a href="#3、Apache日志文件" class="headerlink" title="3、Apache日志文件"></a>3、Apache日志文件</h3><blockquote><p>phpStudy/Apache/logs/</p></blockquote><h3 id="三、Mysql服务目录分析"><a href="#三、Mysql服务目录分析" class="headerlink" title="三、Mysql服务目录分析"></a>三、Mysql服务目录分析</h3><h4 id="1、Mysql启动命令"><a href="#1、Mysql启动命令" class="headerlink" title="1、Mysql启动命令"></a>1、Mysql启动命令</h4><blockquote><p>phpStudy/MySQL/bin #将此目录加入环境变量，方便命令行控制</p></blockquote><h4 id="2、Mysql配置文件"><a href="#2、Mysql配置文件" class="headerlink" title="2、Mysql配置文件"></a>2、Mysql配置文件</h4><blockquote><p>phpStudy/MySQL/my.ini</p></blockquote><h3 id="四、PHP目录分析"><a href="#四、PHP目录分析" class="headerlink" title="四、PHP目录分析"></a>四、PHP目录分析</h3><h4 id="1、PHP探针：phpinfo"><a href="#1、PHP探针：phpinfo" class="headerlink" title="1、PHP探针：phpinfo()"></a>1、PHP探针：<code>phpinfo()</code></h4><h4 id="2、PHP配置文件"><a href="#2、PHP配置文件" class="headerlink" title="2、PHP配置文件"></a>2、PHP配置文件</h4><blockquote><p>phpStudy/php/php你的版本/php.ini</p></blockquote><p>分析PHP文件夹，需要注意PHPStudy软件上提示的PHP版本，去对应版本的PHP问价夹中的php.ini配置文件进行配置</p><h4 id="3、PHP启动路径"><a href="#3、PHP启动路径" class="headerlink" title="3、PHP启动路径"></a>3、PHP启动路径</h4><blockquote><p>phpStudy/php/php你的版本    #将此目录加入环境变量，方便命令行控制</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 代码审计安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12、Shell脚本</title>
      <link href="/2020/07/26/12%E3%80%81Shell%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/07/26/12%E3%80%81Shell%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h2><h3 id="一、什么是脚本？"><a href="#一、什么是脚本？" class="headerlink" title="一、什么是脚本？"></a>一、什么是脚本？</h3><p>与.bat批处理文件是一种类型的文件。脚本编程语言一般是一种解释性的语言。脚本语言主要用于简化计算机相关人员对于一些反复性操作的重复执行，将这些反复性操作的代码写到一个文件中，每次只需要运行这个文件就可以减少很多的工作量。</p><h3 id="二、shell脚本编写格式"><a href="#二、shell脚本编写格式" class="headerlink" title="二、shell脚本编写格式"></a>二、shell脚本编写格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1：#!&#x2F;bin&#x2F;bash    #声明该脚本使用的命令解释器</span><br><span class="line">2：#filename:文件名    </span><br><span class="line">3：#脚本注释</span><br><span class="line">4：by athors ...</span><br></pre></td></tr></table></figure><h3 id="三、shell的变量赋值"><a href="#三、shell的变量赋值" class="headerlink" title="三、shell的变量赋值"></a>三、shell的变量赋值</h3><p>从标准输入接受变量复制：<code>read -p &quot;提示语句&quot; 变量名</code></p><h3 id="四、shell的if判断语句"><a href="#四、shell的if判断语句" class="headerlink" title="四、shell的if判断语句"></a>四、shell的if判断语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition1        #&#96;表达式&#96;可做condition，shell中0为真，非0为假</span><br><span class="line">then</span><br><span class="line">    command1</span><br><span class="line">elif condition2 </span><br><span class="line">then </span><br><span class="line">    command2</span><br><span class="line">else</span><br><span class="line">    commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>大于：<code>-gt</code>、小于：<code>-lt</code>、等于：<code>-eq</code></p><h3 id="五、shell的for循环"><a href="#五、shell的for循环" class="headerlink" title="五、shell的for循环"></a>五、shell的for循环</h3><p>for循环根据<u>取值列表</u>循环。</p><p>生成取值列表：<code>&#123;1..100&#125;</code>    #生成1-100的取值列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN(取值列表)</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="六、shell的while循环"><a href="#六、shell的while循环" class="headerlink" title="六、shell的while循环"></a>六、shell的while循环</h3><p>while循环根据条件进行循环</p><p>echo字体颜色设置：<code>echo -e &quot;\e[1;33;41m 字符串 \e[0m&quot;</code></p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. \e 转义起始符，定义一个转义序列， 可以使用 \033代替</span><br><span class="line">2. [ 表示开始定义颜色</span><br><span class="line">3. 1表示高亮，33表示字体颜色为黄色，45表示背景色为红色</span><br><span class="line">4. “test content” 属于文字内容</span><br><span class="line">5. m 转义终止符，表示颜色定义完毕</span><br><span class="line">6. 再次使用 \e[ ，表示再次开启颜色定义，0表示使用默认的颜色，m表示颜色定义结束，所以 \e[0m 的作用是恢复之前的配色方案</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字体颜色：30——37</span><br><span class="line"></span><br><span class="line">默认&#x3D;0，黑色&#x3D;30，红色&#x3D;31，绿色&#x3D;32，黄色&#x3D;33，蓝色&#x3D;34，紫色&#x3D;35，天蓝色&#x3D;36，白色&#x3D;3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字背景颜色：40——47</span><br><span class="line"></span><br><span class="line">默认&#x3D;0，黑色&#x3D;40，红色&#x3D;41，绿色&#x3D;42，黄色&#x3D;43，蓝色&#x3D;44，紫色&#x3D;45，天蓝色&#x3D;46，白色&#x3D;47</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="七、shell的case语句"><a href="#七、shell的case语句" class="headerlink" title="七、shell的case语句"></a>七、shell的case语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">case 值 in</span><br><span class="line">模式1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    command3</span><br><span class="line">    ;;</span><br><span class="line">模式2）</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    command3</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    command3</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h3 id="八、shell函数"><a href="#八、shell函数" class="headerlink" title="八、shell函数"></a>八、shell函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ function ] funname [()]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    action;</span><br><span class="line"></span><br><span class="line">    [return int;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</li><li>2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255）</li><li>3、函数返回值在调用该函数后通过 $? 来获得。</li></ul></blockquote><table><thead><tr><th align="left">参数处理</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="left">传递到脚本或函数的参数个数</td></tr><tr><td align="left">$*</td><td align="left">以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td align="left">$$</td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="left">$!</td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="left">$@</td><td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。</td></tr><tr><td align="left">$-</td><td align="left">显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td align="left">$?</td><td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><blockquote><p>注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n&gt;=10时，需要使用${n}来获取参数。 </p></blockquote><h3 id="九、实验：编写一个nginx服务脚本，并交由chkconfig管理且实现开机自启动"><a href="#九、实验：编写一个nginx服务脚本，并交由chkconfig管理且实现开机自启动" class="headerlink" title="九、实验：编写一个nginx服务脚本，并交由chkconfig管理且实现开机自启动"></a>九、实验：编写一个nginx服务脚本，并交由chkconfig管理且实现开机自启动</h3><p>1、在/etc/rc.d/init.d下编写一个nginxd服务脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#filename: nginxd</span></span><br><span class="line"><span class="comment">#pwd: /etc/rc.d/init.d</span></span><br><span class="line"><span class="comment">#chkconfig: - 66 66        如果需要被chkconfig管理，必须加此注释</span></span><br><span class="line">nginx=/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;nginx starting... [ \e[32mOK\e[0m ]&quot;</span></span><br><span class="line">    <span class="variable">$nginx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;ngnix stoping... [ \e[32mOK\e[0m ]&quot;</span></span><br><span class="line">    <span class="variable">$nginx</span> -s stop</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;ngnix stoping... [ \e[32mOK\e[0m ]&quot;</span></span><br><span class="line">    <span class="variable">$nginx</span> -s reload</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">status</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> `ss -ntpl | grep nginx &amp;&gt; /dev/null`</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;ngnix starting... [ \e[32mstarting\e[0m ]&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;ngnix is stoped... [ \e[31mstoped\e[0m ]&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">    start</span><br><span class="line">    ;;</span><br><span class="line">stop)</span><br><span class="line">    stop</span><br><span class="line">    ;;</span><br><span class="line">status)</span><br><span class="line">    status</span><br><span class="line">    ;;</span><br><span class="line">reload)</span><br><span class="line">    reload</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage <span class="variable">$0</span> &#123;start|stop|reload|status&#125;&quot;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>2、测试chkconfig是否可以管理此脚本：<code>chkconfig --list nginxd</code></p><p>3、将该脚本加入到chkconfig管理列表：<code>chkconfig --add nginxd</code></p><p>4、设置该脚本在level5级，也就是系统以图形化界面运行启动时，开启此脚本：<code>chkconfig --level 5 nginxd on</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11、iptables——NAT表</title>
      <link href="/2020/07/26/11%E3%80%81iptables%E2%80%94%E2%80%94NAT%E8%A1%A8/"/>
      <url>/2020/07/26/11%E3%80%81iptables%E2%80%94%E2%80%94NAT%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="iptables——NAT表"><a href="#iptables——NAT表" class="headerlink" title="iptables——NAT表"></a>iptables——NAT表</h2><h3 id="一、NAT表"><a href="#一、NAT表" class="headerlink" title="一、NAT表"></a>一、NAT表</h3><p>Network Address Translation：解决了Ipv4网络地址不够的问题，一个局域网或多个局域网公用一个公网地址的网络地址转换技术。</p><h3 id="二、实验环境"><a href="#二、实验环境" class="headerlink" title="二、实验环境"></a>二、实验环境</h3><blockquote><p>为了模拟互联网外网主机不写网关。</p></blockquote><p>SNAT环境：</p><p><a href="https://imgchr.com/i/apGXnK"><img src="https://s1.ax1x.com/2020/07/26/apGXnK.png" alt="apGXnK.png"></a></p><p>DNAT环境：</p><p><a href="https://imgchr.com/i/apdzrR"><img src="https://s1.ax1x.com/2020/07/26/apdzrR.png" alt="apdzrR.png"></a></p><h3 id="三、iptables——NAT表的规则编写"><a href="#三、iptables——NAT表的规则编写" class="headerlink" title="三、iptables——NAT表的规则编写"></a>三、iptables——NAT表的规则编写</h3><blockquote><p>路由后源地址转换、路由前目标地址转换</p></blockquote><h4 id="1、NAT表的三个链"><a href="#1、NAT表的三个链" class="headerlink" title="1、NAT表的三个链"></a>1、NAT表的三个链</h4><p>1）PREROUTING链：路由前位置的规则</p><p>2）POSTROUTING链：路由后位置的规则</p><p>3）OUTPUT链：出站位置规则</p><h4 id="2、SNAT源地址转换的规则编写"><a href="#2、SNAT源地址转换的规则编写" class="headerlink" title="2、SNAT源地址转换的规则编写"></a>2、SNAT源地址转换的规则编写</h4><p><u>1、POSTROUTING链配置SNAT：</u></p><p>1）手动配置转换的外网地址： <code>iptables -t nat -I/A（原表空的so都行） POSTROUTING -p tcp -o eth1（外网端口） -s 192.168.1.0/24（Ip或者网段都行） -j SNAT(源地址转换) --to-source 外网地址(也可以是一个范围) </code></p><p>2）动态获得转换的外网地址： <code>iptables -t nat -I/A（原表空的so都行） POSTROUTING -p tcp -o eth1（外网端口） -s 192.168.1.0/24（Ip或者网段都行） -j MASQUERADE （一律按照外网端口动态获得的IP地址转换）</code>    </p><p><u>2、需要注意Filter表中的FORWARD规则是否允许数据转发：</u></p><p>清除掉FORWARD的规则使其允许所有转发：<code>iptables -t filter -F FORWARD</code></p><h4 id="3、DNAT目标地址转换的规则编写"><a href="#3、DNAT目标地址转换的规则编写" class="headerlink" title="3、DNAT目标地址转换的规则编写"></a>3、DNAT目标地址转换的规则编写</h4><p><u>1、PREROUTING链配置DNAT：</u></p><p><code>iptables -t nat -A/-I PREROUTING -i ethX（外网端口）-d 外网映射地址 -p tcp（协议） --dport 外网映射端口 -j DNAT --to-destination 内网地址:端口</code></p><p><u>2、需要注意Filter表中的FORWARD规则是否允许数据转发：</u>因为目标地址转换完毕后，源地址和目标地址都和路由的主机无关，所以要检查Filter的FORWARD规则了。</p><p><a href="https://imgchr.com/i/aprstx"><img src="https://s1.ax1x.com/2020/07/26/aprstx.png" alt="aprstx.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Linux系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10、iptables——Filter表</title>
      <link href="/2020/07/23/10%E3%80%81iptables%E2%80%94%E2%80%94Filter%E8%A1%A8/"/>
      <url>/2020/07/23/10%E3%80%81iptables%E2%80%94%E2%80%94Filter%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="包过滤防火墙（Centos6由iptables工具控制）"><a href="#包过滤防火墙（Centos6由iptables工具控制）" class="headerlink" title="包过滤防火墙（Centos6由iptables工具控制）"></a>包过滤防火墙（Centos6由iptables工具控制）</h2><h3 id="一、Linux防火墙的发展"><a href="#一、Linux防火墙的发展" class="headerlink" title="一、Linux防火墙的发展"></a>一、Linux防火墙的发展</h3><p>1、在初代Linux防火墙中，防火墙以ipfirewall的形式在内核中单独存在，防火墙规则也写在内核中。</p><p>2、二代Linux防火墙是ipchains(ip链)，二代可以创建和定义规则。</p><p>3、三代Linux防火墙机制就是iptables(ip表)，防火墙的主体在内核中，iptables是用户空间用于创建防火墙规则并与内核中的防火墙进行通信的实体。</p><h3 id="二、iptables的四个功能（表）"><a href="#二、iptables的四个功能（表）" class="headerlink" title="二、iptables的四个功能（表）"></a>二、iptables的四个功能（表）</h3><p>1、raw表与mangle表（很少配置）：数据流量的跟踪与整形。</p><p>2、NAT表(Network Address Translation)</p><p>3、Filter表(过滤表):通过对Filter表中规则编写，限制某些IP地址访问主机的某些服务、过滤主机IP数据包的转发、协议的过滤等。</p><p><a href="https://imgchr.com/i/aprstx"><img src="https://s1.ax1x.com/2020/07/26/aprstx.png" alt="aprstx.png"></a></p><h3 id="三、iptables的基本命令"><a href="#三、iptables的基本命令" class="headerlink" title="三、iptables的基本命令"></a>三、iptables的基本命令</h3><p>查看Filter表的信息：<code>iptables -t filter -nvL</code></p><p>每隔1秒刷新显示一次Filter表信息：<code>watch -n 1（秒数） -d(高亮) iptables -t filter -nvL</code></p><p>重启iptables服务：<code>service iptables restart</code></p><blockquote><p>重启iptables服务后，所有表的规则会按照默认的配置重置。</p></blockquote><h3 id="四、iptables规则的编写"><a href="#四、iptables规则的编写" class="headerlink" title="四、iptables规则的编写"></a>四、iptables规则的编写</h3><blockquote><p>iptables 四表五链：四个功能表、五个配置位置的链； </p><p><a href="https://imgchr.com/i/UztAwF"><img src="https://s1.ax1x.com/2020/07/25/UztAwF.png" alt="UztAwF.png"></a></p><p><strong>控制类型：</strong>ACCEPT允许、DROP直接丢弃、REJECT拒绝必要时有提示、LOG记录日志信息不处理</p><p><strong>选项</strong>：</p><blockquote><p><strong>添加选项</strong>：-A 在链的末尾追加一条规则、-I 在链头插入规则、 -I 链名 n 指定序号n插入</p><p><strong>查看选项</strong>：-L 列出所有的规则条目、 -n 以数字的形式显示地址、端口等信息、 -v 详细显示、 -line-numbers 显示规则的序号</p><p><strong>删除选项</strong>：-D 链名 n， 删除链内指定序号n的规则； -F 清空所有规则(iptables -F或者iptables -t XXX -F)</p><p><strong>默认策略选项</strong>：-P 链名 ACCEPT/DROP，修改某链中没规则匹配时默认执行的操作(缺省是ACCEPT)。</p></blockquote><p><strong>条件：</strong></p><blockquote><p><strong>通用匹配：</strong>通用匹配是条件<u>必须</u>要有的</p><p>协议匹配：-p 协议名</p><p>地址匹配：-s 源地址、-d 目标地址</p><p>接口匹配：-i 入站网卡、-o 出站网卡</p><p><strong>隐含匹配：</strong>隐含匹配非必须条件，用于配合通用匹配</p><p>端口匹配：–sport 源端口、–dport 目的端口</p><p>TCP标记匹配：–tcp-flags 检查TCP报文中被设置的标记(ACK、SYN…)</p><p>ICMP类型匹配：–icmp-type ICMP类型(0、3、8)</p><p><strong>显示匹配：</strong></p><p>多端口匹配：-m multiport –sports | –dports 多端口列表(23,80,443…)</p><p>IP范围匹配：-m iprange –src-range IP范围</p><p>MAC地址匹配：-m mac –mac-source MAC地址</p><p>状态匹配：-m state –state 连接状态(ESTABLISHED…)</p></blockquote></blockquote><h4 id="1、Filter表规则的编写（Filter三个链）："><a href="#1、Filter表规则的编写（Filter三个链）：" class="headerlink" title="1、Filter表规则的编写（Filter三个链）："></a><strong>1、Filter表规则的编写（Filter三个链）：</strong></h4><p><u>1）INPUT链(入站链)：</u></p><blockquote><p><code>iptables -t filter -I（插入写到链头） INPUT -p tcp --dport 80 -j ACCEPT</code>        #允许访问本机80服务</p><p><a href="https://imgchr.com/i/UzUyzn"><img src="https://s1.ax1x.com/2020/07/25/UzUyzn.png" alt="UzUyzn.png"></a></p></blockquote><p><u>2）FORWARD链（转发规则链）：当源地址和目标地址都不是本机IP地址时，遵循该链规则。</u></p><blockquote><p><code>iptables -I FORWARD -s 0.0.0.0/0 -d 0.0.0.0/0 -j DROP</code>        #丢弃所有数据包转发（默认filter表、默认所有协议、默认in out所有接口）</p><p><a href="https://imgchr.com/i/UzNKhj"><img src="https://s1.ax1x.com/2020/07/25/UzNKhj.png" alt="UzNKhj.png"></a></p></blockquote><p><u>3）OUTPUT链(出站链)：</u></p><h3 id="五、防火墙规则的保存"><a href="#五、防火墙规则的保存" class="headerlink" title="五、防火墙规则的保存"></a>五、防火墙规则的保存</h3><p>将当前防火墙的规则配置信息保存到文件中：<code>iptables-save &gt; 目录/文件名</code></p><p>将配置信息导入到防火墙中：<code>iptables-restore &lt; 目录/文件名</code></p><p>将当前防火墙的规则信息存储到根防火墙配置中：<code>service iptables save</code></p><blockquote><p>即修改了iptables的最根本的配置文件/etc/sysconfig/iptables，此后每次重启iptables服务，都会来这个配置文件里面拿规则。</p></blockquote><h3 id="六、实验"><a href="#六、实验" class="headerlink" title="六、实验"></a>六、实验</h3><blockquote><p>环境：Centos6.9 Ftp服务器192.168.1.254； WindowsXP客户机192.168.1.1</p></blockquote><p>1、Centos6.9安装FTP服务器：<code>yum install -y vsftpd</code></p><p>2、开启FTP服务：<code>service vsftpd start</code></p><p>3、设置防火墙规则：<code>iptables -t filter -I INPUT -p tcp --dport 21 -j ACCEPT</code></p><p>4、客户机cmd尝试连接发现成功：<code>ftp 192.168.1.254</code>，用户名:<code>ftp</code>，密码空。ftp用户的家目录/共享目录是/var/ftp</p>]]></content>
      
      
      <categories>
          
          <category> Linux系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9、Tomcat服务器搭建与Nginx负载均衡</title>
      <link href="/2020/07/22/9%E3%80%81Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%8ENginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2020/07/22/9%E3%80%81Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%8ENginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="Tomcat服务器搭建与Nginx负载均衡"><a href="#Tomcat服务器搭建与Nginx负载均衡" class="headerlink" title="Tomcat服务器搭建与Nginx负载均衡"></a>Tomcat服务器搭建与Nginx负载均衡</h2><h3 id="一、Tomcat的使用场景"><a href="#一、Tomcat的使用场景" class="headerlink" title="一、Tomcat的使用场景"></a>一、Tomcat的使用场景</h3><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因此主要用于运行JSP 页面和Servlet，功能没有Apache和Nginx功能全面，性能也不及它俩。</p><h3 id="二、部署Tomcat-Web服务器与Tomcat特点"><a href="#二、部署Tomcat-Web服务器与Tomcat特点" class="headerlink" title="二、部署Tomcat Web服务器与Tomcat特点"></a>二、部署Tomcat Web服务器与Tomcat特点</h3><blockquote><p>实验用例是Tomcat免安装版，Tomcat依赖JDK环境，因此如果没有JDK需要安装。</p></blockquote><p>1、解压Tomcat免安装版的压缩包</p><p>2、分析一下网页资源的目录在Webapps</p><blockquote><p>Webapps/ROOT        #默认主页所在的目录</p></blockquote><p>3、开启Tomcat服务 <code>bin/startup.sh</code>，Tomcat的默认端口是8080</p><h3 id="三、Tomcat-Nginx实现负载均衡"><a href="#三、Tomcat-Nginx实现负载均衡" class="headerlink" title="三、Tomcat+Nginx实现负载均衡"></a>三、Tomcat+Nginx实现负载均衡</h3><p><strong>权重</strong>：负载均衡机制通过服务器权重的设置来分配服务器的资源使用。</p><blockquote><p>实验环境：一台Centos6虚拟机部署1个Nginx、2个tomcat服务器</p></blockquote><p><strong>1、将三个服务器在一个机器中部署：</strong></p><p>​    要想在1台虚拟机部署三个Web服务器首先要考虑的就是端口占用问题，Nginx默认80、Tomcat默认8080，因此只需要将其中一个Tomcat端口改为8081即可。</p><p>​    Tomcat服务器配置端口比传统服务器复杂，通过PREFIX/conf/server.xml中对各个标签头port的修改即可。也许不需要 -&gt;（并且需要在第二个tomcat服务器的start.sh和stop.sh中加入<code>export CATALINA_HOME=第二个Tomcat的PREFIX目录路径</code>、<code>export CATALINA_BASE=第二个Tomcat的PREFIX目录路径</code>即可）。</p><p><strong>2、Nginx配置文件中配置负载均衡</strong></p><p>在http{}中加入负载均衡集群配置：</p><blockquote><p>upstream 负载均衡配置块名(tomcat_server) {</p><p>​    server 服务器IP:端口 weight=权值;    #配置负载均衡集群中的服务器地址并赋予权重</p><p>​    server 服务器IP:端口 weight=权值;    #同上</p><p>}</p></blockquote><p>在location / {}中加入代理配置：</p><blockquote><p>proxy_pass http://负载均衡配置块名；    #每当访问nginx的/下的网页都会触发该代理</p></blockquote><h3 id="四、正向代理服务器和反向代理服务器"><a href="#四、正向代理服务器和反向代理服务器" class="headerlink" title="四、正向代理服务器和反向代理服务器"></a>四、正向代理服务器和反向代理服务器</h3><p>1、反向代理服务器：类似于Nginx负载均衡，用户在向服务器请求服务时，对于用户来说不清楚真正为其服务的是哪个服务器，则用户所请求的服务器类型就称为反向代理服务器。（用户已知，服务器未知）</p><p>2、正向代理服务器：用户通过VPN等代理服务器去请求某个服务器，用户请求哪个，为其服务的就是哪个服务器，这种情况为其服务的服务器称为正向代理服务器。（用户是未知，服务器已知）</p>]]></content>
      
      
      <categories>
          
          <category> Linux系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8、LNMP架构搭建(Nginx)</title>
      <link href="/2020/07/22/8%E3%80%81LNMP%E6%9E%B6%E6%9E%84%E6%90%AD%E5%BB%BA%EF%BC%88Nginx%EF%BC%89/"/>
      <url>/2020/07/22/8%E3%80%81LNMP%E6%9E%B6%E6%9E%84%E6%90%AD%E5%BB%BA%EF%BC%88Nginx%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="LNMP架构搭建（Nginx）"><a href="#LNMP架构搭建（Nginx）" class="headerlink" title="LNMP架构搭建（Nginx）"></a>LNMP架构搭建（Nginx）</h2><h3 id="一、Nginx的优点"><a href="#一、Nginx的优点" class="headerlink" title="一、Nginx的优点"></a>一、Nginx的优点</h3><p>1、处理高并发性更好</p><p>2、系统资源利用率比较高，损耗率很低，稳定(C语言开发)</p><p>3、Nginx是异步IO模型，一个进程对应多个连接；Apache是同步IO模型，一个进程对应一个连接。</p><p>4、处理静态网页的能力更好</p><h3 id="二、Nginx环境的搭建"><a href="#二、Nginx环境的搭建" class="headerlink" title="二、Nginx环境的搭建"></a>二、Nginx环境的搭建</h3><p><u>1、安装Nginx环境，首先需要安装Nginx的运行库/开发环境软件包。</u></p><p><strong>开发环境软件包什么样：</strong>后缀带”-devel”的软件包。</p><p><strong>安装Nginx的开发环境/运行库</strong>：<code>yum install pcre-devel</code>、<code>yum install zlib-devel</code>(在安装系统时选中了开发环境，因此该软件包已安装完毕)</p><p><u>2、源码包的方式安装Nginx服务器</u>：</p><p><strong>源码包老套路，检查编译环境并指定安装路径、程序用户和组，各子目录生成Makefile文件：</strong><code> ./configure --prefix=/usr/local/nginx --with-file-aio（） --with-http_gzip_static_module --with-http_flv_module --with-http_ssl_module --user=nginx --group=nginx --with-http_stub_status_module</code></p><p><strong>编译和安装</strong>：<code>make</code>、<code>make install</code></p><p><u>3、创建Nginx的进程/程序用户，使Nginx程序单独由该用户管理，以保证Nginx服务的安全性</u>：<code>useradd -M -s /sbin/nologin nginx</code>(不要家目录，不可登录)</p><p>4、<u>nginx的prefix工作目录下开启nginx服务</u>：<code>./nginx</code></p><blockquote><p><code>./nginx -?</code>    #查看nginx帮助</p><p><code>./nginx -s </code>    #给nginx进程发信号 stop 停止服务</p></blockquote><h3 id="三、Nginx服务器配置文件介绍"><a href="#三、Nginx服务器配置文件介绍" class="headerlink" title="三、Nginx服务器配置文件介绍"></a>三、Nginx服务器配置文件介绍</h3><blockquote><p>Nginx主配置文件：PREFIX/conf/nginx.conf</p><p>1-10行全局配置、11-14行I/O事件配置、17行以后全是http配置</p></blockquote><p>第3行左右： <code>worker_processes 1;</code>        #Nginx服务使用的CPU核心数</p><p>第13行左右：<code>worker_connections 1024;</code>        #每个进程处理的最大连接数</p><p>35行左右：<code>listen 80</code>        #监听端口<br>36行左右：<code>server_name localhost</code>        #服务IP地址</p><p>43行左右：<code>location / &#123; root html; index index.html index.htm;&#125;</code>    #定义Nginx网页根目录和网页主页索引值</p><h3 id="四、源码包安装PHP并使Nginx可以解析PHP"><a href="#四、源码包安装PHP并使Nginx可以解析PHP" class="headerlink" title="四、源码包安装PHP并使Nginx可以解析PHP"></a>四、源码包安装PHP并使Nginx可以解析PHP</h3><blockquote><p><strong>Nginx默认不支持PHP解析</strong></p></blockquote><p><strong>1、</strong>PHP的依赖开发环境/运行库：<code>libxml2-devel</code>、<code>libjpeg-devel</code>、<code>libpng-devel</code></p><p><strong>2、</strong>压缩源码包</p><p><strong>3、</strong><code> ./configure --prefix=/usr/local/php5 --with-gd --with-zlib --with-config-file-path=/usr/local/php5 --enable-mbstring --enable-fpm --with-jpeg-dir=/usr/lib</code></p><blockquote><p>–with-gd：支持php处理图形的扩展库GD库</p><p>–with-zlib：支持提供数据压缩用的函式库zlib库</p><p>-with-config-file-path=/usr/local/php5：指定自己的php.ini路径</p><p> –enable-mbstring ：mbstring扩展库用于处理多字节字符串（有点像unicode补丁）</p><p>–enable-fpm：开启php-fpm（PHP FastCGI Process Manager）模块，PHP FastCGI 进程管理器，用于管理PHP 进程池的软件，用于接受web服务器的请求。</p><p>–with-jpeg-dir=/usr/lib：设置libjpeg库的安装路径（支持jpeg图片格式）</p></blockquote><p><strong>4、</strong>编译安装：<code>make</code>、<code>make install</code></p><p><strong>5、</strong>先修改php配置文件(PREFIX/etc/php-fpm.conf)的default后缀（默认有后缀）；并将源码路径中的php.ini-development主配置文件拷贝一份到PREFIX/etc/php.ini（默认没有这个主配置文件）</p><p><strong>6、</strong>执行Prefix/sbin/php-fpm从而管理fastcgi（PHP）程序，开启后9000端口也随之开启。</p><p><strong>7、</strong>配置nginx服务器，使其支持PHP脚本并且指定FastiCGI管理服务的IP和端口</p><p>方法1、</p><blockquote><p><strong>PREFIX/conf/fastcgi_params</strong></p><p>fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</p><p>加此条配置目的是告诉php-fpm管理进程php脚本的名字。</p></blockquote><hr><blockquote><p><strong>PREFIX/conf/nginx.conf</strong></p><p>66         location ~ \.php$ {</p><p>67             root           html;</p><p>68             fastcgi_pass   127.0.0.1:9000;</p><p>69             fastcgi_index  index.php;</p><p>70             fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</p><p>71             include        fastcgi_params;</p><p>72         }</p></blockquote><p>方法2、</p><blockquote><p><strong>PREFIX/conf/nginx.conf</strong></p><p>66         location ~ \.php$ {<br>67             root           html;<br>68             fastcgi_pass   127.0.0.1:9000;<br>69             fastcgi_index  index.php;<br>70             include        fastcgi_conf;<br>71         }</p><p>使用fastcgi_conf的话，配置文件里已经存在了<code>fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</code></p></blockquote><h3 id="五、LAMP的PHP和LNMP的PHP有什么不同？"><a href="#五、LAMP的PHP和LNMP的PHP有什么不同？" class="headerlink" title="五、LAMP的PHP和LNMP的PHP有什么不同？"></a>五、LAMP的PHP和LNMP的PHP有什么不同？</h3><p>LAMP中PHP是Apache的一个模块；而在LNMP中PHP独立存在，PHPCgi由PHP-FPM管理，PHP-FPM拥有自己的端口专门处理PHP解析。</p><blockquote><p>引自：<a href="https://www.cnblogs.com/donghui521/p/10334776.html">https://www.cnblogs.com/donghui521/p/10334776.html</a></p><p>目前主流的nginx+php的运行原理如下：<br>1、nginx的worker进程直接管理每一个请求到nginx的网络请求。<br>2、对于php而言，由于在整个网络请求的过程中php是一个cgi程序的角色，所以采用名为php-fpm的进程管理程序来对这些被请求的php程序进行管理。php-fpm程序也如同nginx一样，需要监听端口，并且有master和worker进程。worker进程直接管理每一个php进程。<br>3、关于fastcgi：fastcgi是一种进程管理器，管理cgi进程。市面上有多种实现了fastcgi功能的进程管理器，php-fpm就是其中的一种。再提一点，php-fpm作为一种fast-cgi进程管理服务，会监听端口，一般默认监听9000端口，并且是监听本机，也就是只接收来自本机的端口请求，所以我们通常输入命令 netstat -nlpt|grep php-fpm 会得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp    0   0 127.0.0.1:9000       0.0.0.0:*          LISTEN   1057&#x2F;php-fpm</span><br></pre></td></tr></table></figure><p>这里的127.0.0.1:9000 就是监听本机9000端口的意思。<br>4、关于fastcgi的配置文件，目前fastcgi的配置文件一般放在nginx.conf同级目录下，配置文件形式，一般有两种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastcgi.conf  和 fastcgi_params。不同的nginx版本会有不同的配置文件，这两个配置文件有一个非常重要的区别：fastcgi_parames文件中缺少下列配置：</span><br><span class="line">fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br></pre></td></tr></table></figure><p>我们可以打开<code>fastcgi_params</code>文件加上上述行，也可以在要使用配置的地方动态添加。使得该配置生效。<br>5、当需要处理php请求时，nginx的worker进程会将请求移交给php-fpm的worker进程进行处理，也就是最开头所说的nginx调用了php，其实严格得讲是nginx间接调用php。 </p></blockquote><h3 id="六、LNMP的缺点"><a href="#六、LNMP的缺点" class="headerlink" title="六、LNMP的缺点"></a>六、LNMP的缺点</h3><p>PHP-FPM的负载能力有限，如果访问量特别大的话，PHP-FPM容易陷入僵死状态，浏览器显示：502 bad gateway错误。</p>]]></content>
      
      
      <categories>
          
          <category> Linux系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7、LAMP架构搭建</title>
      <link href="/2020/07/21/7%E3%80%81LAMP%E6%9E%B6%E6%9E%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/07/21/7%E3%80%81LAMP%E6%9E%B6%E6%9E%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="LAMP架构搭建"><a href="#LAMP架构搭建" class="headerlink" title="LAMP架构搭建"></a>LAMP架构搭建</h2><h3 id="一、什么是LAMP架构"><a href="#一、什么是LAMP架构" class="headerlink" title="一、什么是LAMP架构"></a>一、什么是LAMP架构</h3><p>LAMP架构就是Linux、Apache、Mysql、Php结合起来的运行环境。LAMP是比较流行的Web服务架构。</p><h3 id="二、部署Mysql服务端"><a href="#二、部署Mysql服务端" class="headerlink" title="二、部署Mysql服务端"></a>二、部署Mysql服务端</h3><p>1、yum源安装：<code>yum install -y mysql-server</code></p><p>2、启动Mysql服务：<code>service mysqld start</code></p><p>3、第一次修改root密码：<code>mysqladmin -u root password &quot;密码&quot;</code></p><p>4、第n次(n&gt;1)修改root密码：<code>mysqladmin -u root -p password &quot;新密码&quot;</code>,然后提示输入旧密码</p><p>5、登录数据库：<code>mysql -u root -p</code></p><h3 id="三、部署PHP语言环境"><a href="#三、部署PHP语言环境" class="headerlink" title="三、部署PHP语言环境"></a>三、部署PHP语言环境</h3><p>1、yum源安装：<code>yum install -y php</code></p><p>2、yum源安装PHPmysql驱动库：<code>yum install -y php-mysql/php-mbstring</code></p><p>3、php-mbstring在第二盘Centos光盘中，安全性考虑先卸载，再安装新的光盘：<code>umount /dev/cdrom</code>，换好光盘后再挂载光盘<code>mount /dev/cdrom /media</code></p><blockquote><p>因为手动挂载光盘到/media，yum配置以前的文件路径是/media/CentosXXX所以要将配置改为/media。而且这里要注意，光盘2中没有依赖文件列表，因此只能单纯安装某个依赖包，无法自动处理依赖，解决方法是挂载光盘1利用光盘1中的依赖文件列表先创建一个cache。然后光盘2就可以在cache中找到依赖文件列表处理依赖了。</p></blockquote><h3 id="四、PHP配置文件分析"><a href="#四、PHP配置文件分析" class="headerlink" title="四、PHP配置文件分析"></a>四、PHP配置文件分析</h3><blockquote><p>/etc/php.ini</p></blockquote><p>229行左右 ：<code>short_open_tag = On</code>        #开启PHP短标签模式，不需要&lt;?php，只需要&lt;?即可。</p><blockquote><p>配置好后需要重启Apache，测试一个致命的“裸体”函数：<code>&lt;? phpinfo(); ?&gt;</code></p><p>PHP必须依靠Web服务器才能工作，在Apache中PHP只是一个网页程序</p></blockquote><h3 id="五、PHP程序的工作流程"><a href="#五、PHP程序的工作流程" class="headerlink" title="五、PHP程序的工作流程"></a>五、PHP程序的工作流程</h3><p>1、WEB浏览器请求一个url操作。</p><p>2、如果是静态网页，那么Web服务器只需要正常返回HTML页面即可。</p><p>3、如果是PHP页面(XXX.php)，那么Web服务器会委托系统中的<strong>PHP预处理器</strong>(Preprocessor)将请求的php文件解释为HTML静态页面返回给WEB浏览器。</p><p>​    这个将PHP文件解释为HTML页面的过程，由PHP解释器进行，期间可能会有一些数据库的增删改查等操作，将数据库中的数据拼接到HTML页面后返回给WEB浏览器，这就是动态网页。</p><h3 id="六、PHPMyAdmin数据库WEB客户端软件"><a href="#六、PHPMyAdmin数据库WEB客户端软件" class="headerlink" title="六、PHPMyAdmin数据库WEB客户端软件"></a>六、PHPMyAdmin数据库WEB客户端软件</h3><p>一款基于PHP开发的数据库客户端Web管理页面，直接解压到<code>/var/www/html</code>下直接访问进行管理。</p>]]></content>
      
      
      <categories>
          
          <category> Linux系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6、Apache网页服务器安全架构</title>
      <link href="/2020/07/21/6%E3%80%81Apache%E7%BD%91%E9%A1%B5%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84/"/>
      <url>/2020/07/21/6%E3%80%81Apache%E7%BD%91%E9%A1%B5%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="Apache网页服务器安全架构"><a href="#Apache网页服务器安全架构" class="headerlink" title="Apache网页服务器安全架构"></a>Apache网页服务器安全架构</h2><h3 id="一、什么是LAMP架构"><a href="#一、什么是LAMP架构" class="headerlink" title="一、什么是LAMP架构"></a>一、什么是LAMP架构</h3><p>LAMP架构就是Linux、Apache、Mysql、Php结合起来的运行环境。LAMP是比较流行的Web服务架构。</p><h3 id="二、Web服务工作原理"><a href="#二、Web服务工作原理" class="headerlink" title="二、Web服务工作原理"></a>二、Web服务工作原理</h3><p>1、用户在浏览器中执行一个请求操作</p><p>2、浏览器与网页服务器进程建立TCP连接</p><p>3、浏览器将请求操作按照Http协议打包为数据包发送到网页服务器</p><p>4、服务器进程对接受到的Http数据包解析，生成对应的响应Http数据包</p><p>5、将响应Http数据包发送给客户端浏览器</p><p>6、客户端浏览器对获得的应答Http数据包进行处理，显示等。</p><h3 id="三、Apache配置文件基本分析"><a href="#三、Apache配置文件基本分析" class="headerlink" title="三、Apache配置文件基本分析"></a>三、Apache配置文件基本分析</h3><p>57行左右：<code>ServerRoot &quot;/etc/httpd&quot;</code>    #Apach配置根路径</p><p>65行左右：<code>PidFIle run/httpd.pid</code>        #Apach服务的根进程号（相对配置根路径的相对路径）</p><p>136行左右：<code>Listen 80</code>        #Apache监听端口</p><p>150行后：<code>LoadModule XXXXX</code>        #Apache加载的一系列功能模块</p><p>221行左右：<code>Include conf.d/*.conf</code>        #导入的配置文件</p><p>242行左右：<code>User apache</code>        #配置Apache的进程用户</p><p>243行左右：<code>Group apache</code>        #配置Apache的进程组</p><p>292行左右：<code>DocumentRoot &quot;/var/www/html&quot;</code>        #Web网页的根目录</p><p>317-346行左右：<code>&lt;Directory &quot;/var/www/html&quot;&gt; XXXX &lt;/Directory&gt; </code>        #针对Web网页根目录的配置信息</p><h3 id="四、Apache服务器安全加固"><a href="#四、Apache服务器安全加固" class="headerlink" title="四、Apache服务器安全加固"></a>四、Apache服务器安全加固</h3><p><code>&lt;Directory &quot;/var/www/html&quot;&gt;</code></p><p><u>331行左右</u>：<code>Options FollowSymLinks</code>        #<strong>关闭目录共享功能</strong></p><p><u>343行左右</u>：<code>Order allow,deny</code>        #<strong>访问控制</strong>匹配列表中允许项，如果匹配不到全拒绝，下面写访问控制列表</p><blockquote><p>343行左右：<code>Order deny,allow</code>        #访问控制匹配列表中拒绝项，如果匹配不到全允许，下面写访问控制列表</p></blockquote><p><u>344行左右</u>：<code>Allow/Deny from all|host|env=[!]env-variable [host|env=[!]env-variable] ...</code>        #<strong>访问控制</strong>列表</p><blockquote><p>例子：拒绝整个网段 Deny from 192.168.1.</p></blockquote><p><u>345行左右</u>：<strong>设置主页通过认证的方式访问</strong></p><p>​    <code>authtype basic</code>    #认证类型<br>​    <code>authname &quot;随便&quot;</code>    #认证名称，会出现在认证提示语中<br>​    <code>authuserfile apache认证用户列表</code>    #specify认证用户的列表</p><blockquote><p>通过 <code>htppasswd -c 认证用户列表存放路径 认证用户列表名</code>来创建认证用户列表，通知注意对认证用户列表进行撤权，<code>chown apache </code>并且<code>chmod 400</code></p></blockquote><p>​    <code>require valid-user</code>    #允许此列表访问 </p><p><code>&lt;/Directory&gt; </code>        </p>]]></content>
      
      
      <categories>
          
          <category> Linux系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5、日志服务器的搭建</title>
      <link href="/2020/07/20/5%E3%80%81%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/07/20/5%E3%80%81%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="日志服务器的搭建"><a href="#日志服务器的搭建" class="headerlink" title="日志服务器的搭建"></a>日志服务器的搭建</h2><h3 id="一、什么是日志"><a href="#一、什么是日志" class="headerlink" title="一、什么是日志"></a>一、什么是日志</h3><p>日志是记录系统活动信息的文件，默认系统运行产生的日志位于：/var/log。</p><p>一般记录什么时间、什么来源（IP）、什么用户、做了什么操作？</p><p>通过分析日志，有助于解决系统故障、查看非法行为等。</p><h3 id="二、日志的分类"><a href="#二、日志的分类" class="headerlink" title="二、日志的分类"></a>二、日志的分类</h3><p>1、系统服务日志：记录系统在运行中产生的事件变化（/var/log/messages）。</p><p>2、系统认证日志：何时何地谁尝试登陆系统，是否成功等（/var/log/secure）。</p><p>3、系统邮件服务日志：(/var/log/maillog)</p><p>4、系统定时任务日志：(/var/log/cron) </p><p>5、系统启动信息:（/var/log/boot.log）</p><h3 id="三、日志服务的配置文件"><a href="#三、日志服务的配置文件" class="headerlink" title="三、日志服务的配置文件"></a>三、日志服务的配置文件</h3><p>syslogd软件：/sbin/rsyslogd；syslog服务管理。</p><p>1、日志服务的配置文件：/etc/rsyslog.conf  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##MODULES####</span></span></span><br><span class="line">定义了UDP、TCP的日志监听模块</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##GLOBAL DIRECTIVES###</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">ActionFileDeFaultTemplate***    定义了日志显示的格式</span></span><br><span class="line"><span class="meta">$</span><span class="bash">IncludeConfig                根据路径导入配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##RULES###</span></span></span><br><span class="line">服务类型（连接符号）日志信息级别；（所有信息等级&gt;specify的日志信息写入右边的日志文件）</span><br><span class="line">*.info;    mail.none;    authpriv.none;    cron.none  /var/log/messages</span><br><span class="line">连接符号：</span><br><span class="line">.info 表示info等级以上</span><br><span class="line">.=info 表示info级别</span><br><span class="line">.!info 表示除了info级别，其他的所有级别</span><br></pre></td></tr></table></figure><p>2、日志级别</p><blockquote><p>1、debug    调试信息</p><p>2、info,        普通信息</p><p>3、notice,    提醒信息</p><p>4、warning, warn  (same  as  warning)    警告信息</p><p>5、err,error  (same  as  err),    错误信息</p><p>6、crit,     危机信息</p><p>7、alert,    警报信息</p><p>8、emerg, panic (same as     emerg)    紧急信息</p></blockquote><h3 id="四、日志备份——日志服务器的搭建"><a href="#四、日志备份——日志服务器的搭建" class="headerlink" title="四、日志备份——日志服务器的搭建"></a>四、日志备份——日志服务器的搭建</h3><blockquote><p>一旦服务器被入侵，日志文件被删除，依靠日志服务器中的备份日志，我们也可以对入侵行为进行分析。</p></blockquote><p>日志服务器分为客户端和服务端。</p><p>服务端：接受谁的日志？用什么协议和端口传输日志？存放在哪里？</p><p>客户端：发送什么级别什么服务的日志？用什么协议和端口传输日志？发给谁？</p><h4 id="日志服务器客户端的环境搭建"><a href="#日志服务器客户端的环境搭建" class="headerlink" title="日志服务器客户端的环境搭建"></a><strong>日志服务器客户端的环境搭建</strong></h4><p>1、客户端编辑日志配置文件/etc/rsyslog.conf写备份规则与服务器地址</p><blockquote><p>####begin forwarding rule####</p><p>#*.* @@remote-host：514</p><p>authpriv.*;    @@日志服务器IP：端口号   (@@TCP协议、@UDP协议)</p></blockquote><p>2、重启日志服务：<code>service rsyslog restart</code></p><h4 id="日志服务器服务端的环境搭建"><a href="#日志服务器服务端的环境搭建" class="headerlink" title="日志服务器服务端的环境搭建"></a><strong>日志服务器服务端的环境搭建</strong></h4><p>1、服务端编辑日志配置文件/etc/rsyslog.conf</p><blockquote><p><strong>####MODULES####</strong></p><p><strong>$ModLoad_imtcp（TCP协议）</strong></p><p><strong>$InputTCPServerRun 514（监听端口）</strong></p><p><strong>### end of the forwarding rule ###</strong></p><p>：属性    比较操作符    值        存放路径</p><p><strong>:fromhost-ip,isequal,”192.168.1.1”    /var/log/client/xiaozhi.log</strong></p><p>属性：fromhost，fromhost-ip，hostname</p><p>比较操作符：isequal startweith</p><p>值：匹配属性</p></blockquote><p>2、重启日志服务：<code>service rsyslog restart</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4、Linux网络配置</title>
      <link href="/2020/07/20/4%E3%80%81Linux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/07/20/4%E3%80%81Linux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux网络配置"><a href="#Linux网络配置" class="headerlink" title="Linux网络配置"></a>Linux网络配置</h2><h3 id="一、Linux网络配置（大部分临时）"><a href="#一、Linux网络配置（大部分临时）" class="headerlink" title="一、Linux网络配置（大部分临时）"></a>一、Linux网络配置（大部分临时）</h3><p><u>1、查看网络配置状态信息</u>：<code>ip addr</code>； </p><blockquote><p>lo 回环测试地址， ehX有线网卡， wlpXX 无线网卡</p></blockquote><p><u>2、临时关闭NetworkManager服务</u>：<code>service NetworkManager stop</code></p><p>设置345level下关闭该服务：<code>chkconfig --level 345 NetworkManager off</code></p><blockquote><p>NetworkManager是Centos中一个帮助linux用户自动配置、管理网络的守护进程服务程序，桌面右上角的图形化网络管理工具就是它。</p><p>Linux的7个level运行级别</p><p>0    关机</p><p>1    单用户模式，root用户（windows 安全模式）</p><p>2    多用户，没有NFS（Network File System ）</p><p>3    完全的多用户模式（正常系统开机模式），控制台界面</p><p>4    没有用到，保留位</p><p>5    Xserver，GUI图形化界面（我目前看到的所有都是这个级别。。）</p><p>6    重启</p></blockquote><p><u>3、配置网络地址IP</u></p><p>配置网卡网络地址：<code>ip addr add  IP地址/子网掩码 dev 网卡名</code></p><p>删除网卡上的网络地址配置：<code>ip addr del IP地址/子网掩码 dev 网卡名</code></p><p><u>4、配置网关/路由</u></p><p>配置网卡的网关/默认路由：<code>ip route add default via 192.168.2.254  dev eth0</code></p><p>查看网卡的路由状态：<code>ip route</code></p><blockquote><p>在学习数通安全时，我们把路由器和计算机看做相同ISO层的设备，就是因为他们拥有相同的能力。因此计算机也可以看作路由器，具有路由功能，所以也可以配置路由，相当于电脑的网关。</p></blockquote><p><u>5、DNS服务器配置文件</u>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;resolv.conf在其中配置一条 nameserver 202.106.0.20（北京的DNS服务器）</span><br></pre></td></tr></table></figure><p><u>6、开启网卡：</u><code>ip link set eth0 up</code>/<code>ifdown 网卡</code>/<code>ifup 网卡</code></p><h3 id="二、Linux网络配置（配置文件方式永久）"><a href="#二、Linux网络配置（配置文件方式永久）" class="headerlink" title="二、Linux网络配置（配置文件方式永久）"></a>二、Linux网络配置（配置文件方式永久）</h3><p>配置文件：/etc/sysconfig/network-scripts/ifcfg-ethX</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DEVICE&#x3D;eth0            #网卡名</span><br><span class="line">TYPE&#x3D;Ethernet        #网络类型，以太网</span><br><span class="line">ONBOOT&#x3D;yes            #是否由network服务管理此配置文件</span><br><span class="line">BOOTPROTO&#x3D;static    #静态获取&#x2F;dhcp</span><br><span class="line">IPADDR&#x3D;192.168.2.183    #IP地址</span><br><span class="line">NETMASK&#x3D;255.255.255.0    #子网掩码</span><br><span class="line">#NM_CONTROLLED&#x3D;yes    #是否由NetworkManager服务管理此配置文件</span><br><span class="line">#HWADDR&#x3D;XXXXXXXXX    #MAC地址</span><br><span class="line">GATEWAY&#x3D;192.168.2.254    #网关地址</span><br><span class="line">DNS1&#x3D;114.114.114.114    #配置DNS地址</span><br><span class="line">DNS2&#x3D;XXX                #备用DNS地址</span><br></pre></td></tr></table></figure><h3 id="三、实验：使用Centos作为路由器连通两个网段的主机"><a href="#三、实验：使用Centos作为路由器连通两个网段的主机" class="headerlink" title="三、实验：使用Centos作为路由器连通两个网段的主机"></a>三、实验：使用Centos作为路由器连通两个网段的主机</h3><blockquote><p>1、Win7主机网络internet-01，IP：192.168.1.1， 网关:192.168.1.254</p><p>​    Centos作为路由器eth0位于internet-01，IP：192.168.1.254，eth1位于internet-02，IP：100.1.1.1</p><p>Windows2003作为服务器位于internet-02，IP：100.1.1.2，网关：100.1.1.1</p><p><strong>开启数据包转发功能：/etc/sysctl.conf    net.ipv4.ip_forwarding=1</strong></p><p>关闭防火墙，SElinux。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3、Linux用户管理与权限相关</title>
      <link href="/2020/07/19/3%E3%80%81Linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E4%B8%8E%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3/"/>
      <url>/2020/07/19/3%E3%80%81Linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E4%B8%8E%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux用户管理与权限相关"><a href="#Linux用户管理与权限相关" class="headerlink" title="Linux用户管理与权限相关"></a>Linux用户管理与权限相关</h2><p>ACL相关介绍：<a href="https://www.ibm.com/developerworks/cn/linux/l-acl/">https://www.ibm.com/developerworks/cn/linux/l-acl/</a></p><h3 id="一、su、sudo与sudoers权限管理"><a href="#一、su、sudo与sudoers权限管理" class="headerlink" title="一、su、sudo与sudoers权限管理"></a>一、su、sudo与sudoers权限管理</h3><p><a href="http://linux.vbird.org/linux_basic/0410accountmanager.php#shadow_file">http://linux.vbird.org/linux_basic/0410accountmanager.php#shadow_file</a></p><p>1、普通用户</p><p>2、超级管理员 root</p><blockquote><p><strong>使用su进行用户切换时，加 - 和不加 - 是有很大区别的，加 - 是以切换的用户的login_shell登录，环境变量的资源都准确的是刚切换的用户的；而不加 - 只改变一小部分资源，大部分还是原来用户的。</strong></p><p><a href="https://imgchr.com/i/URunmT"><img src="https://s1.ax1x.com/2020/07/19/URunmT.png" alt="URunmT.png"></a></p></blockquote><p>su 和 sudo的区别？</p><blockquote><p><strong>su是switch user，如果是切换root，就需要使用超级管理员root的密码</strong></p><p><strong>sudo是暂时使用某用户的权限进行操作，一般使用超级管理员权限，但是只有在/etc/sudoers名单中的用户才能使用，使用时输入的的是当前用户的密码而非超级管理员密码。</strong></p><p><a href="https://imgchr.com/i/URMyef"><img src="https://s1.ax1x.com/2020/07/19/URMyef.png" alt="URMyef.png"></a></p></blockquote><p><strong>sudo的时间有效期</strong>：两次sudo命令5分钟以内就不用再次输入密码。</p><p><strong>/etc/sudoers的编辑方法</strong>：使用<code>visudo</code>命令编辑，如果有语法问题会报错。</p><p>/<strong>etc/sudoers设置权限的方法</strong>：</p><blockquote><p>账号/组名 | 主机名  | 可切换的身份  | 可下达的命令（绝对路径）</p><p><strong>用户</strong>： <code>user ALL=(ALL) ALL</code></p><p><strong>组</strong>：    <code>%group ALL=(ALL) ALL</code></p><p><strong>给用户设置某个指令的方法：</strong></p><p><code>user ALL=(ALL) !/usr/bin/passwd,!/usr/bin/passwd root,/usr/bin/passwd root </code>   #使用户只能帮忙修改密码，但是不能修改root的密码</p><p><strong>不需要密码使用sudo</strong>:<code>user ALL=(ALL) NOPASSWD: ALL</code></p><p>除了组可以统一规范多个用户的行为以外，还可以使用变量/别名的方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]# visudo  <span class="tag">&lt;<span class="name">==注意是</span> <span class="attr">root</span> 身份</span></span><br><span class="line"><span class="tag"><span class="attr">User_Alias</span> <span class="attr">ADMPW</span> = <span class="string">pro1,</span> <span class="attr">pro2</span>, <span class="attr">pro3</span>, <span class="attr">myuser1</span>, <span class="attr">myuser2</span></span></span><br><span class="line"><span class="tag"><span class="attr">Cmnd_Alias</span> <span class="attr">ADMPWCOM</span> = <span class="string">!/usr/bin/passwd,</span> /<span class="attr">usr</span>/<span class="attr">bin</span>/<span class="attr">passwd</span> [<span class="attr">A-Za-z</span>]*, !/<span class="attr">usr</span>/<span class="attr">bin</span>/<span class="attr">passwd</span> <span class="attr">root</span></span></span><br><span class="line"><span class="tag"><span class="attr">ADMPW</span>   <span class="attr">ALL</span>=<span class="string">(root)</span>  <span class="attr">ADMPWCOM</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="二、-etc-shadow，-etc-passwd-etc-group文件分析"><a href="#二、-etc-shadow，-etc-passwd-etc-group文件分析" class="headerlink" title="二、/etc/shadow，/etc/passwd, /etc/group文件分析"></a>二、/etc/shadow，/etc/passwd, /etc/group文件分析</h3><p>用户名 | 密码密文 | 密码最近一次修改时间（1970.1.1起的相对天数）| 密码修改后多少天后才可以再修改 | 密码有效期 | 密码过期前提前几天进行警告 | 密码宽限时间（过期后登录会强制修改密码，过了宽限时间密码会失效，只能联系root进行操作）|  最终失效期（即使修改了密码也会失效，就是账户的寿命，比如可以用作收费授权）</p><p>SHA512加密，且使用了salt值一起加密，密码字段有三段$6$salt$密文，详情见鸟哥。</p><h3 id="三、用户管理相关操作命令"><a href="#三、用户管理相关操作命令" class="headerlink" title="三、用户管理相关操作命令"></a>三、用户管理相关操作命令</h3><blockquote><p><strong>Linux的用户是先有组后有用户，当创建用户没有指定基本组时，逻辑是先创建一个和用户名相同的组，然后该用户的基本组被默认设置为用户名相同的组。</strong></p><p><u><strong>用户创建管理等相关默认配置信息：/etc/login.defs</strong>，<strong>修改此文件可从根本打破linux的默认用户相关创建规则。</strong></u></p></blockquote><p><u>groupXXX</u>：</p><p><strong>增加组并指定组号</strong>：<code>groupadd -g 组号 组名</code></p><p><strong>修改组号</strong>：<code>groupmod -g 新组号 组名</code></p><p><strong>删除组：</strong><code>groupdel 组名</code></p><p><u>userXXX：</u></p><p><strong>增加用户并指定基本组和附加组：</strong><code>useradd -g 基本组 -G 附加组 新用户名</code></p><p><strong>添加用户并指定无家目录</strong>：<code>useradd -M 用户名</code></p><p><strong>添加用户并设置shell</strong>：<code>useradd -s shell程序（如/sbin/nologin）用户名</code></p><p><strong>设置用户的附加组与修改用户UID</strong>：<code>usermod -G 附加组号 -u UID号 用户名</code></p><p><strong>删除用户</strong>（连同家目录一起删除）：<code>userdel -r 用户名</code></p><p><u>passwd：</u></p><p><strong>设置用户密码：</strong><code>passwd 用户名</code>（密码四分之三原则，大小写、特殊字符、长度6位以上）</p><p><strong>将用户密码进行锁定，无法登录(在shadow密码前加了!!)：</strong><code>passwd -l(lock) 用户名</code></p><p><strong>将用户密码进行解锁</strong>：<code>passwd -u 用户名</code></p><p><strong>查看用户的passwd状态</strong>：<code>passwd -S 用户名</code></p><p><u>gpasswd：</u></p><p><strong>将用户从组中删除：</strong><code>gpasswd -d user 组</code></p><p><u>chage：</u></p><p><strong>设置用户密码有效期：</strong><code>chage -M 天数 用户名</code></p><p><strong>设置用户下次登录必须修改密码：</strong><code>chage -d 0 用户名</code></p><h3 id="四、Linux权限"><a href="#四、Linux权限" class="headerlink" title="四、Linux权限"></a>四、Linux权限</h3><p><strong>查看目录权限的命令</strong>：<code>ls -ld 目录名</code></p><blockquote><p>第一段是文件类型和权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文件类型：d目录、-二进制、b块设备、c字符设备...</span><br><span class="line">权限三段rwx分别是主、组和其他用户的读r、写w、执行权限位x</span><br><span class="line">    r                w            x</span><br><span class="line">文件：可读取文件    可修改文件内容    可执行文件</span><br><span class="line">目录：可查看目录内容    可增删文件    可以进入目录</span><br></pre></td></tr></table></figure><p>第二段是如果是目录就表示目录中的子目录数；如果是文件就是节点/硬链接数(深入讲就是硬盘里该部分数据在文件系统中的关联节点数)</p><p>第三段是文件属主</p><p>第四段是文件属组</p><p>第五六七段是最新修改时间</p><p>第八段是文件名</p><p>第九段我称其为安全权限位：如果使用了ACL就是<code>+</code>，如果开启了selinux每一个文件这个位置都是  <code>.</code> ，表示有selinux相关的安全上下文，使用<code>getfacl 文件名</code>可以查看。</p></blockquote><p><strong>修改文件权限的命令</strong>：<code>chmod 用户 算术运算符 权限 文件</code></p><blockquote><p>用户：u(所属者) g(所属组) o(其他用户) a(所有人)</p><p>算术运算符：+ - =</p><p>权限：r、w、x、s(SGID/SUID)、t(SBIT)</p></blockquote><p><strong>修改文件的所属者</strong>：<code>chown 用户名 文件</code></p><p><strong>修改文件的所属组</strong>：<code>chgrp 组名 文件</code></p><h3 id="五、Linux特殊的权限"><a href="#五、Linux特殊的权限" class="headerlink" title="五、Linux特殊的权限"></a>五、Linux特殊的权限</h3><p><strong>1、粘滞位（Sticky Bit）/SBIT</strong>：粘滞位权限只能针对目录文件赋权，目录中创建的文件只有建立者可以删除。该权限位一般用于系统运行生成临时文件的目录，例如/tmp，以防止其它坏蛋删除临时文件，影响系统运行。<code>chmod o+t</code></p><blockquote><p>在使用8进制表示的权限中，1XXX就表示特殊权限粘滞位SBIT的赋权。</p><p>当权限位 t 是大写 T 时，说明此处无 x 权限。（SBIT占用x权限位）</p></blockquote><p><strong>2、SGID（Set-GID）</strong>：SGID权限只能针对目录文件赋权，在该目录下建立的文件所属组继承父目录的属组。</p><blockquote><p>在使用8进制表示的权限中，2XXX就表示特殊权限粘滞位SGID的赋权。</p><p>当权限位 s是大写 S 时，说明此处无 x 权限。（SGID占用x权限位）</p></blockquote><p><strong>3、SUID（Set-UID）</strong>：SUID权限只能针对文件赋权，一般针对可执行文件，在运行这个可执行文件后创建的进程的操作权限和文件属主相同/或者说进程的euid赋值为文件属主的uid。</p><p>​    可想而知，具有SUID的root属主可执行文件是很危险的，一旦对这种进程成功攻击，则会拿到root的权限，因此对于SUID进程，linux很多程序都有相关的保护措施，比如代码中常用的system函数，它的原理是通过/bin/sh -c command来执行命令的，在Ubuntu16.04/12.04中/bin/sh软链接指向/bin/dash，而dash就实现了一个保护机制，当它发现自己在一个Set-UID进程中运行时，会将有效用户IDeuid转变为真实用户IDruid，主动放弃特权，防止权限泄露。</p><blockquote><p>在使用8进制表示的权限中，4XXX就表示特殊权限粘滞位SGID的赋权。</p><p>当权限位 s是大写 S 时，说明此处无 x 权限。（SUID占用x权限位）</p></blockquote><p><strong>查找SUID程序的方法：</strong><code>find 文件夹 -perm 4XXX/2XXX/1XXX </code></p><h3 id="六、修改文件属性"><a href="#六、修改文件属性" class="headerlink" title="六、修改文件属性"></a>六、修改文件属性</h3><p><strong>增加文件不可变的属性</strong>：<code>chattr +i /etc/passwd /etc/shadow</code></p><p><strong>让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件：</strong><code>chattr +a /var/log/messages</code></p><p><strong>查看文件的属性:</strong><code>lsattr /etc/passwd /etc/shadow</code></p><h3 id="七、创建文件的默认权限"><a href="#七、创建文件的默认权限" class="headerlink" title="七、创建文件的默认权限"></a>七、创建文件的默认权限</h3><p>root和普通用户创建文件和目录的权限都不相同。</p><p>Linux认为目录的最高权限是0777、文件的最高权限是0666(因为不是所有文件都可以执行)</p><p>因此umask就是针对目录和文件的最高权限进行计算的。root的umask是0022；UID&gt;199且UID==GID的umask时002</p><p>一般推荐umask为027。</p><p><strong>修改umask的方法：</strong></p><p>1、临时修改：只需<code>umask 新的值</code></p><p>2、永久修改：/etc/profile（用户第一次登陆时执行） 在64行左右有一个对umask判断赋值的语句，判断是否UID大于199并且UID==GID，如果是，则umask002，否则umask022。可进行修改。/etc/bashrc （用户每次登录bash时执行），也要改。小心权限修改影响业务。</p>]]></content>
      
      
      <categories>
          
          <category> Linux系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2、安装Apache源码包与介绍RPM包</title>
      <link href="/2020/07/18/2%E3%80%81%E5%AE%89%E8%A3%85Apache%E6%BA%90%E7%A0%81%E5%8C%85%E3%80%81%E4%BB%8B%E7%BB%8DRPM%E5%8C%85%E3%80%81yum%E6%BA%90/"/>
      <url>/2020/07/18/2%E3%80%81%E5%AE%89%E8%A3%85Apache%E6%BA%90%E7%A0%81%E5%8C%85%E3%80%81%E4%BB%8B%E7%BB%8DRPM%E5%8C%85%E3%80%81yum%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Apache源码包与介绍RPM包"><a href="#安装Apache源码包与介绍RPM包" class="headerlink" title="安装Apache源码包与介绍RPM包"></a>安装Apache源码包与介绍RPM包</h2><h3 id="一、Centos6安装Apache的步骤"><a href="#一、Centos6安装Apache的步骤" class="headerlink" title="一、Centos6安装Apache的步骤"></a>一、Centos6安装Apache的步骤</h3><p>1、将源码压缩包移动到/usr/src 或者 /usr/share下</p><p>2、查看INSTALL文档，编译安装三步骤：./configuration –prefix=安装目录（可缺省，缺省就是/usr/local/apache2）；make；make install</p><p>3、去源码路径的bin下apachectl start即可开启Apache的http服务（关闭就是stop）</p><p><strong>源码包Apache的主页</strong>：在安装路径中的htdocs文件夹中。</p><p><strong>修改Apache的端口号：</strong>1)源码包：$PREFIX/conf/http.conf 2)封装包：/etc/httpd/conf/http.conf; 然后重启</p><h3 id="二、端口相关命令"><a href="#二、端口相关命令" class="headerlink" title="二、端口相关命令"></a>二、端口相关命令</h3><p><code>ss -an</code>：比 netstat 好用的socket统计信息，iproute2 包附带的另一个工具，允许你查询 socket 的有关统计信息</p><p>干掉占用端口的进程:<code>netstat -tnlp | grep 80 ; kill PID</code></p><h3 id="三、不同Linux操作系统下的安装包"><a href="#三、不同Linux操作系统下的安装包" class="headerlink" title="三、不同Linux操作系统下的安装包"></a>三、不同Linux操作系统下的安装包</h3><p><strong>Debian</strong>: deb；<strong>Red Ha</strong>t: rpm,</p><p><strong>RPM包的命名格式</strong>：<code>名字 版本号 编辑次数 系统版本(EL6 == RED HAT6) 系统架构（noarch == 所有cpu架构可用）</code></p><p><strong>查看所有已安装的rpm包</strong>：<code>rpm -qa (query all)</code> </p><p><strong>查看rpm包安装的软件文件列表</strong>:<code>rpm -ql rpm包</code></p><p><strong>查看rpm包的详细信息</strong>：<code>rpm -qpi  rpm包(query package information)</code></p><p><strong>查看rpm的文件列表与安装路径</strong>：<code>rpm-qpl rpm包(list)</code></p><p><strong>安装rpm包</strong>：<code>rpm -ivh rpm包（install verify hash安装时列出标记）</code></p><p><strong>卸载rpm包安装的</strong>：<code>rpm -e 软件名</code>（软件之间会有依赖关系，需要按照依赖逐个rpm -e）</p><p><strong>yum软件安装的各种文件都在哪？</strong>：分布在各个地方，不在一个目录，比如配置文件在/etc,执行文件在/usr/bin,/usr/sbin/, 库文件在/usr/lib, 等等</p><h3 id="四、源码包与RPM包的不同"><a href="#四、源码包与RPM包的不同" class="headerlink" title="四、源码包与RPM包的不同"></a>四、源码包与RPM包的不同</h3><p><strong>源码包</strong>：由厂商开源发布，安装时可定制安装路径，整个软件所有产生的文件都集中在一个文件夹里，方便删除和移动。</p><p><strong>RPM包</strong>：由厂商封装好，操作系统提供RPM包管理支持，安装路径固定，且分散（比如配置文件在/etc，可执行文件在/bin），不可以详细的定制安装路径，但是方便管理，只需要使用rpm命令工具即可进行管理操作，无需手动管理。</p><h3 id="五、Yum源安装软件"><a href="#五、Yum源安装软件" class="headerlink" title="五、Yum源安装软件"></a>五、Yum源安装软件</h3><p>Yum源工具本身就是为了使安装与卸载等操作简单化，原理上是根据配置文件中的依赖关系列表来自动化处理依赖关系。</p><h4 id="1、自己写一个yum配置文件，可以使用yum自动的安装光盘中的RPM包并处理相关依赖"><a href="#1、自己写一个yum配置文件，可以使用yum自动的安装光盘中的RPM包并处理相关依赖" class="headerlink" title="1、自己写一个yum配置文件，可以使用yum自动的安装光盘中的RPM包并处理相关依赖"></a>1、自己写一个yum配置文件，可以使用yum自动的安装光盘中的RPM包并处理相关依赖</h4><p><strong>yum配置文件路径</strong>：/etc/yum.repo.d</p><p>1）首先将yum.repo.d下的所有配置文件备份到一个bak文件夹中</p><p>2）新建一个文件dvd.repo，并且编辑它</p><p>3）内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[dvdrom] #标签</span><br><span class="line">name=&quot;yum dvd rom&quot; #描述</span><br><span class="line">baseurl=file:///media/CentOS_6.9_Final #依赖关系列表位置</span><br><span class="line">gpgcheck=0 #是否进行密钥对检查，如需检查，下一行需要写公钥文件位置gpgkey=file:///XXXX（由于公钥是权威的Centos的公钥，而私钥无人知道，因此很保密、权威）</span><br></pre></td></tr></table></figure><p>依赖关系列表就存储在光盘中的repodata中，以xml的形式存在。 这些xml应该不仅描述了软件的依赖，还描述了软件的安装地址。（否则如何在不联网的情况下自动安装了DVD1中的rpm）</p><p><strong>yum安装软件</strong>：<code>yum install 软件名</code></p><p><strong>yum卸载软件</strong>：<code>yum remove 软件名</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1、部署Centos以及Linux基本命令与知识</title>
      <link href="/2020/07/17/1%E3%80%81%E9%83%A8%E7%BD%B2Centos%E4%BB%A5%E5%8F%8ALinux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%B8%8E%E7%9F%A5%E8%AF%86-1/"/>
      <url>/2020/07/17/1%E3%80%81%E9%83%A8%E7%BD%B2Centos%E4%BB%A5%E5%8F%8ALinux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%B8%8E%E7%9F%A5%E8%AF%86-1/</url>
      
        <content type="html"><![CDATA[<h2 id="部署Centos"><a href="#部署Centos" class="headerlink" title="部署Centos"></a>部署Centos</h2><h3 id="一、部署Centos6-9系统"><a href="#一、部署Centos6-9系统" class="headerlink" title="一、部署Centos6.9系统"></a>一、部署Centos6.9系统</h3><blockquote><p>部署Centos6.9系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、安装且升级一个已存在的操作系统</span><br><span class="line"></span><br><span class="line">2、用基本图形驱动安装系统</span><br><span class="line"></span><br><span class="line">3、安装救援系统</span><br><span class="line"></span><br><span class="line">4、从本地驱动启动</span><br><span class="line"></span><br><span class="line">5、内存检测</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">跳过光盘检查</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">取消UTC时间</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择适用所有空件，并选中查看并修改系统分区</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">选择现在自定义，自定义安装系统服务软件</span><br><span class="line">桌面 -&gt; 除了kde桌面其余全部打钩，并且将开发里面的所有选项打钩</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kdump用不用都可</span><br></pre></td></tr></table></figure></blockquote><h3 id="二、系统初始操作"><a href="#二、系统初始操作" class="headerlink" title="二、系统初始操作"></a>二、系统初始操作</h3><p>1、关闭防火墙：<code>setup</code>图形化操作界面。查看防火墙的规则状态：<code>iptables -nL</code></p><p>2、关闭SElinux：/etc/selinux/config 配置文件中的SELINUX=disabled</p><h3 id="三、查看系统基本状态"><a href="#三、查看系统基本状态" class="headerlink" title="三、查看系统基本状态"></a>三、查看系统基本状态</h3><p><strong>查看硬盘大小</strong>：<code>fdisk -l</code></p><p><strong>硬盘相关知识：</strong>Linux中挂载的SATA硬盘是SD开头，/dev/sda表示第一块硬盘、/dev/sdb表示第二块以此类推(Linux2.X以后所有硬盘都是sd开头了（以前还有HDA IDE接口的第一块硬盘）?) /dev/sda1就表示第一块硬盘的第一个分区，以此类推。</p><p><strong>查看内存信息</strong>：<code>cat /proc/meminfo</code></p><p><strong>查看cpu信息</strong> :<code>cat /proc/cpuinfo</code></p><h3 id="四、Linux根目录结构"><a href="#四、Linux根目录结构" class="headerlink" title="四、Linux根目录结构"></a>四、Linux根目录结构</h3><p>Linux系统文件组织形式采用FHS文件系统层次化标准</p><blockquote><p>鸟哥的Linux私房菜(顶顶的)：<a href="http://linux.vbird.org/linux_basic/0210filepermission.php#dir">http://linux.vbird.org/linux_basic/0210filepermission.php#dir</a></p></blockquote><p><a href="https://imgchr.com/i/UsUbZV"><img src="https://s1.ax1x.com/2020/07/17/UsUbZV.png" alt="UsUbZV.png"></a></p><p>除FHS标准以外，Linux增设的目录。</p><p><a href="https://imgchr.com/i/UsN9p9"><img src="https://s1.ax1x.com/2020/07/17/UsN9p9.png" alt="UsN9p9.png"></a></p><p>重点在于：/proc 和 /sys 其实是虚拟文件系统，不占用硬盘空间，只占用内存空间。另外/usr不是”user”而是unix software resource。</p><h3 id="五、基本的Linux命令与快捷键"><a href="#五、基本的Linux命令与快捷键" class="headerlink" title="五、基本的Linux命令与快捷键"></a>五、基本的Linux命令与快捷键</h3><p><code>ls -a</code> List files显示所有文件（包括隐藏文件）</p><p><code>Ctrl+l</code>清屏、<code>Ctrl+c</code>打断目前命令</p><p><code>help</code>，除man手册以外Linux自带的帮助命令。</p><p><code>du</code>查看文件所占磁盘大小，以块大小为单位！默认1个块block是4KB，也就是4096字节。</p><p><strong>复制与转换一个文件</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if&#x3D;输入文件 of&#x3D;输出文件 bs&#x3D;单位 count&#x3D;多少个单位</span><br></pre></td></tr></table></figure><p><strong>压缩文件</strong>：<code>gzip 文件名， bzip2 文件名</code>（不保留源文件），<code>gzip/bzip -c 文件名 &gt; *.gz/bz2</code>，（保留原文件，-c是将压缩结果输出）</p><p><strong>解压文件</strong>：<code>gunzip 压缩包/gzip -d 压缩包；bunzip2 压缩包/bzip2 -d 压缩包</code> (不保留原文件)，``gzip/bzip -dc 压缩包 &gt; 新文件名`（保留原文件）</p><p><strong>查看压缩文件</strong>：<code>zcat/bzcat *.gz/*.bz2</code></p><p><strong>查看系统开启的端口状态：</strong><code>ss -an</code></p><p><strong>查看系统进程占用的端口状态：</strong><code>netstat -t(TCP)nlp（进程号与程序名称）</code></p><p><strong>tar工具对目录进行打包和压缩</strong>：</p><blockquote><p><strong>tar [主选项+辅选项] [文件1] [文件2] [目录1] [目录2] [……]</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主选项：（每次只能使用一个）</span><br><span class="line">c 创建一个新归档文件（小c）</span><br><span class="line">x 从归档文件中提取文件出来 #主选项x会自动识别归档文件压缩的格式，并进行解压</span><br><span class="line">t 列出归档文件的内容</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">辅选项：（每次可以使用多个）</span><br><span class="line">z 通过gzip的支持进行压缩&#x2F;解压，一般格式为*.tar.gz</span><br><span class="line">j 通过bzip2的支持进行压缩&#x2F;解压，一般格式为*.tar.bz2</span><br><span class="line">v 归档或解包过程中显示被打包的文件</span><br><span class="line">C 只在解压时，若要在特定目录解压,使用它（大C）</span><br><span class="line">P 对绝对路径的文件或目录进行操作(默认tar用相对路径)</span><br><span class="line">f 输出结果到文件，必须选该项</span><br></pre></td></tr></table></figure></blockquote><h3 id="六、Linux文件的类型"><a href="#六、Linux文件的类型" class="headerlink" title="六、Linux文件的类型"></a>六、Linux文件的类型</h3><p>1、 <strong>-</strong> ：常规文件regular file， 纯文字文件，二进制文件，数据格式文件。</p><p>2、<strong>d</strong>：目录directory。</p><p>3、<strong>l</strong>：链接文件link。硬链接，inode相同，都指向硬盘里同一个存储数据。软连接，inode不同，指向的是另外一个inode。</p><p>4、<strong>b</strong>:块设备文件block，这种设备可以随意在不同的区域读写，如硬盘、软盘等，如/dev/sda。</p><p>5、<strong>c</strong>：字符设备文件character，字符设备文件必须一次性读取数据，如键盘、鼠标等。</p><p>6、<strong>s</strong>：数据接口文件sockets，通常用于网络传输，例如/dev/tcp/XXXX</p><p>7、<strong>p</strong>：管道文件FIFO。</p><h3 id="七、Vim快捷命令"><a href="#七、Vim快捷命令" class="headerlink" title="七、Vim快捷命令"></a>七、Vim快捷命令</h3><p>删除行：<code>数字+dd</code>删除光标以及下面的n行，默认是1行</p><p>复制当前行：<code>yy</code></p><p>复制到光标上一行：<code>P</code></p><p>移到文件首：<code>gg</code>，移到文件末：<code>G</code>，移动到第n行：<code>nG</code></p><p>移动到行首：<code>数字0/Home键/^</code>，移动到行尾：<code>End/$</code></p><p>匹配上一个匹配字：<code>N</code></p><p>命令模式下<code>ZZ</code>相当于<code>wq</code>无需输入<code>:</code>即可保存退出</p><p>替换字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#96;s&#x2F;被替代&#x2F;替代的字符串&#96; （只替换光标当前行的第一个匹配的字符串）</span><br><span class="line">&#96;s&#x2F;被替代&#x2F;替代的字符串&#x2F;g&#96; （只替换光标当前行所有匹配的字符串）</span><br><span class="line">&#96;n1,n2 s&#x2F;被替代&#x2F;替代的字符串&#x2F;g&#96; （替换n1到n2行所有匹配的字符串）</span><br><span class="line">&#96;% s&#x2F;被替代&#x2F;替代的字符串&#x2F;g&#96; （替换当前页所有匹配的字符串）</span><br></pre></td></tr></table></figure><p>另存为当前文件（备份）:<code>w /路径/文件名（可绝对可相对）</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类目录</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>大家好，我是XXX。欢迎来到我的个人技术博客。</p><p>这里用markdown写下你的简介，就跟平时写md一样就可以了。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>读书</title>
      <link href="/reading/index.html"/>
      <url>/reading/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
